{
  "name": "üó£Ô∏è Voice Assistant: HA + YandexGPT + GigaChat",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"],
        "additionalFields": {
          "download": false,
          "userIds": "YOUR_TELEGRAM_USER_ID"
        }
      },
      "name": "Telegram: Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [240, 400],
      "id": "telegram-trigger-001",
      "webhookId": "voice-assistant-webhook",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç + –≥–æ–ª–æ—Å). –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_TELEGRAM_USER_ID"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.message.voice }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Check: Voice or Text?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [460, 400],
      "id": "check-message-type-001",
      "notes": "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: –≥–æ–ª–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "name": "Telegram: Get Voice File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [680, 280],
      "id": "get-voice-file-001",
      "webhookId": "get-voice-webhook",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –∏–∑ Telegram"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Api-Key YOUR_YANDEX_CLOUD_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "audio",
              "inputDataFieldName": "data"
            },
            {
              "name": "lang",
              "value": "ru-RU"
            },
            {
              "name": "folderId",
              "value": "YOUR_YANDEX_FOLDER_ID"
            },
            {
              "name": "format",
              "value": "oggopus"
            }
          ]
        },
        "options": {}
      },
      "name": "Yandex: SpeechKit STT",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 280],
      "id": "yandex-stt-001",
      "notes": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_YANDEX_CLOUD_API_KEY, YOUR_YANDEX_FOLDER_ID"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "text-assignment-001",
              "name": "text",
              "value": "={{ $json.result }}",
              "type": "string"
            },
            {
              "id": "chat-id-assignment-001",
              "name": "chat_id",
              "value": "={{ $('Telegram: Trigger').first().json.message.chat.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Extract: Transcribed Text",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 280],
      "id": "extract-transcribed-001",
      "notes": "–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ SpeechKit"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "text-direct-assignment-001",
              "name": "text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "chat-id-direct-assignment-001",
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Extract: Text Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [680, 520],
      "id": "extract-text-001",
      "notes": "–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "name": "Merge: Voice + Text",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [1340, 400],
      "id": "merge-inputs-001",
      "notes": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    },
    {
      "parameters": {
        "jsCode": "// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\nconst text = $input.item.json.text;\nconst chatId = $input.item.json.chat_id;\n\nif (text === '/clear') {\n  return [{ json: { isCommand: true, command: 'clear', chat_id: chatId, text: 'üóëÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω' } }];\n}\n\nif (text === '/help') {\n  const helpText = `ü§ñ *–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Home Assistant*\\n\\n*–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\\n‚Ä¢ –í–∫–ª—é—á–∏/–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç [–∫–æ–º–Ω–∞—Ç–∞]\\n‚Ä¢ –°–¥–µ–ª–∞–π —Ç–µ–ø–ª–µ–µ/—Ö–æ–ª–æ–¥–Ω–µ–µ [–∫–æ–º–Ω–∞—Ç–∞]\\n‚Ä¢ –ó–∞–ø—É—Å—Ç–∏ —Å—Ü–µ–Ω—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]\\n‚Ä¢ –ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ [–∫–æ–º–Ω–∞—Ç–∞]?\\n\\n*–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\\n/lights - —Å–ø–∏—Å–æ–∫ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤\\n/status - —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞\\n/scenes - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω—ã\\n/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`;\n  return [{ json: { isCommand: true, command: 'help', chat_id: chatId, text: helpText } }];\n}\n\nreturn [{ json: { isCommand: false, text: text, chat_id: chatId } }];"
      },
      "name": "Check: Commands",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 400],
      "id": "check-commands-001",
      "notes": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/clear, /help –∏ —Ç.–¥.)"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isCommand }}",
              "value2": true
            }
          ]
        }
      },
      "name": "If: Is Command?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1780, 400],
      "id": "if-command-001",
      "notes": "–†–∞–∑–¥–µ–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
    },
    {
      "parameters": {
        "jsCode": "// Home Assistant Tools –¥–ª—è YandexGPT\nconst tools = [\n  {\n    type: \"function\",\n    function: {\n      name: \"turn_on_light\",\n      description: \"–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          entity_id: {\n            type: \"string\",\n            description: \"ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: light.kitchen)\"\n          },\n          brightness: {\n            type: \"number\",\n            description: \"–Ø—Ä–∫–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –æ—Ç 0 –¥–æ 255 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\"\n          }\n        },\n        required: [\"entity_id\"]\n      }\n    }\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"turn_off_light\",\n      description: \"–í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          entity_id: {\n            type: \"string\",\n            description: \"ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: light.kitchen)\"\n          }\n        },\n        required: [\"entity_id\"]\n      }\n    }\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"set_temperature\",\n      description: \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          entity_id: {\n            type: \"string\",\n            description: \"ID –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: climate.bedroom)\"\n          },\n          temperature: {\n            type: \"number\",\n            description: \"–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è\"\n          }\n        },\n        required: [\"entity_id\", \"temperature\"]\n      }\n    }\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"set_climate_mode\",\n      description: \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          entity_id: {\n            type: \"string\",\n            description: \"ID –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\"\n          },\n          hvac_mode: {\n            type: \"string\",\n            enum: [\"heat\", \"cool\", \"heat_cool\", \"off\", \"auto\"],\n            description: \"–†–µ–∂–∏–º: heat (–æ–±–æ–≥—Ä–µ–≤), cool (–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ), heat_cool (–∞–≤—Ç–æ), off (–≤—ã–∫–ª), auto\"\n          }\n        },\n        required: [\"entity_id\", \"hvac_mode\"]\n      }\n    }\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"activate_scene\",\n      description: \"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É (scene) –≤ Home Assistant\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          entity_id: {\n            type: \"string\",\n            description: \"ID —Å—Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: scene.evening)\"\n          }\n        },\n        required: [\"entity_id\"]\n      }\n    }\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"get_sensor_state\",\n      description: \"–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          entity_id: {\n            type: \"string\",\n            description: \"ID –¥–∞—Ç—á–∏–∫–∞ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\"\n          }\n        },\n        required: [\"entity_id\"]\n      }\n    }\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"list_lights\",\n      description: \"–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –≤ –¥–æ–º–µ\",\n      parameters: {\n        type: \"object\",\n        properties: {}\n      }\n    }\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"list_scenes\",\n      description: \"–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω\",\n      parameters: {\n        type: \"object\",\n        properties: {}\n      }\n    }\n  }\n];\n\nconst text = $input.item.json.text;\nconst chatId = $input.item.json.chat_id;\n\nreturn [{ json: { text, chat_id: chatId, tools } }];"
      },
      "name": "Prepare: HA Tools",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 520],
      "id": "prepare-tools-001",
      "notes": "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Home Assistant –¥–ª—è LLM"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Api-Key YOUR_YANDEX_CLOUD_API_KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"modelUri\": \"gpt://YOUR_YANDEX_FOLDER_ID/yandexgpt-lite\", \"completionOptions\": {\"stream\": false, \"temperature\": 0.6, \"maxTokens\": 500}, \"messages\": [{\"role\": \"system\", \"text\": \"–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–º–Ω–æ–≥–æ –¥–æ–º–∞ Home Assistant. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–µ—Ç–æ–º, –∫–ª–∏–º–∞—Ç–æ–º, —Å—Ü–µ–Ω–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –¥–∞—Ç—á–∏–∫–æ–≤. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (tools). –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å. –°–µ–≥–æ–¥–Ω—è \" + $now.format('cccc, yyyy-MM-dd HH:mm') + \".\"}, {\"role\": \"user\", \"text\": $json.text}], \"tools\": $json.tools} }}",
        "options": {
          "timeout": 30000
        }
      },
      "name": "YandexGPT: Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2440, 520],
      "id": "yandexgpt-chat-001",
      "notes": "–û—Å–Ω–æ–≤–Ω–æ–π LLM - YandexGPT. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_YANDEX_CLOUD_API_KEY, YOUR_YANDEX_FOLDER_ID",
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "name": "Check: YandexGPT Error?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [2660, 520],
      "id": "check-yandex-error-001",
      "notes": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫–∏ YandexGPT –¥–ª—è fallback –Ω–∞ GigaChat"
    },
    {
      "parameters": {
        "jsCode": "function generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst data = $('Prepare: HA Tools').first().json;\n\nreturn [{ json: { uuid: generateUUID(), text: data.text, chat_id: data.chat_id, tools: data.tools } }];"
      },
      "name": "GigaChat: UUID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2880, 660],
      "id": "gigachat-uuid-001",
      "notes": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID –¥–ª—è GigaChat OAuth"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "RqUID",
              "value": "={{$json.uuid}}"
            },
            {
              "name": "Authorization",
              "value": "Basic YOUR_GIGACHAT_AUTHORIZATION_KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "scope",
              "value": "GIGACHAT_API_PERS"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GigaChat: Get Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3100, 660],
      "id": "gigachat-token-001",
      "notes": "–ü–æ–ª—É—á–∞–µ—Ç access token –¥–ª—è GigaChat. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_GIGACHAT_AUTHORIZATION_KEY"
    },
    {
      "parameters": {
        "jsCode": "// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HA tools –≤ —Ñ–æ—Ä–º–∞—Ç GigaChat\nconst uuidData = $('GigaChat: UUID').first().json;\nconst token = $input.item.json.access_token;\n\n// GigaChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π OpenAI —Ñ–æ—Ä–º–∞—Ç –¥–ª—è function calling\nconst functions = uuidData.tools.map(tool => ({\n  name: tool.function.name,\n  description: tool.function.description,\n  parameters: tool.function.parameters\n}));\n\nconst request = {\n  model: \"GigaChat\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–º–Ω–æ–≥–æ –¥–æ–º–∞ Home Assistant. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–µ—Ç–æ–º, –∫–ª–∏–º–∞—Ç–æ–º, —Å—Ü–µ–Ω–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –¥–∞—Ç—á–∏–∫–æ–≤. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å. –°–µ–≥–æ–¥–Ω—è \" + new Date().toLocaleString('ru-RU') + \".\"\n    },\n    {\n      role: \"user\",\n      content: uuidData.text\n    }\n  ],\n  functions: functions,\n  temperature: 0.7,\n  max_tokens: 500\n};\n\nreturn [{ json: { token, request, chat_id: uuidData.chat_id } }];"
      },
      "name": "GigaChat: Prepare Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3320, 660],
      "id": "gigachat-prepare-001",
      "notes": "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ GigaChat —Å HA tools"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$json.token}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.request}}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GigaChat: Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3540, 660],
      "id": "gigachat-chat-001",
      "notes": "Fallback LLM - GigaChat –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö YandexGPT"
    },
    {
      "parameters": {
        "jsCode": "// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT\nconst response = $input.item.json;\nconst chatId = $('Prepare: HA Tools').first().json.chat_id;\n\nlet text = '';\nlet functionCall = null;\n\nif (response.result && response.result.alternatives && response.result.alternatives.length > 0) {\n  const alternative = response.result.alternatives[0];\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏\n  if (alternative.message.functionCall) {\n    functionCall = alternative.message.functionCall;\n    text = alternative.message.text || '–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...';\n  } else {\n    text = alternative.message.text || '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å.';\n  }\n} else {\n  text = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT';\n}\n\nreturn [{ json: { text, functionCall, chat_id: chatId, source: 'yandexgpt' } }];"
      },
      "name": "Parse: YandexGPT Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2880, 380],
      "id": "parse-yandex-001",
      "notes": "–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç function_call"
    },
    {
      "parameters": {
        "jsCode": "// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat\nconst response = $input.item.json;\nconst chatId = $('GigaChat: Prepare Request').first().json.chat_id;\n\nlet text = '';\nlet functionCall = null;\n\nif (response.choices && response.choices.length > 0) {\n  const choice = response.choices[0];\n  \n  if (choice.message.function_call) {\n    functionCall = {\n      name: choice.message.function_call.name,\n      arguments: JSON.parse(choice.message.function_call.arguments || '{}')\n    };\n    text = '–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...';\n  } else {\n    text = choice.message.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å.';\n  }\n} else {\n  text = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat';\n}\n\nreturn [{ json: { text, functionCall, chat_id: chatId, source: 'gigachat' } }];"
      },
      "name": "Parse: GigaChat Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3760, 660],
      "id": "parse-gigachat-001",
      "notes": "–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç GigaChat –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç function_call"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "name": "Merge: LLM Responses",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [3100, 400],
      "id": "merge-llm-001",
      "notes": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç YandexGPT –∏ GigaChat"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.functionCall }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Check: Has Function Call?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [3320, 400],
      "id": "check-function-001",
      "notes": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É HA"
    },
    {
      "parameters": {
        "jsCode": "// –†–æ—É—Ç–∏–Ω–≥ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É HA —É–∑–ª—É\nconst functionCall = $input.item.json.functionCall;\nconst chatId = $input.item.json.chat_id;\n\nreturn [{ json: { \n  function_name: functionCall.name,\n  function_args: typeof functionCall.arguments === 'string' ? JSON.parse(functionCall.arguments) : functionCall.arguments,\n  chat_id: chatId\n}}];"
      },
      "name": "Route: Function Call",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3540, 280],
      "id": "route-function-001",
      "notes": "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é HA –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.function_name }}",
              "operation": "equals",
              "value2": "turn_on_light"
            }
          ]
        }
      },
      "name": "Switch: Function Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [3760, 280],
      "id": "switch-function-001",
      "notes": "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∫ –Ω—É–∂–Ω–æ–º—É HA –¥–µ–π—Å—Ç–≤–∏—é",
      "parameters": {
        "options": {
          "fallbackOutput": 3
        },
        "rules": {
          "rules": [
            {
              "operation": "equals",
              "value2": "turn_on_light",
              "output": 0
            },
            {
              "operation": "equals",
              "value2": "turn_off_light",
              "output": 1
            },
            {
              "operation": "equals",
              "value2": "set_temperature",
              "output": 2
            }
          ]
        }
      }
    },
    {
      "parameters": {
        "resource": "service",
        "domain": "light",
        "service": "turn_on",
        "serviceAttributes": "={{ {\"entity_id\": $json.function_args.entity_id, \"brightness\": $json.function_args.brightness || 255} }}"
      },
      "name": "HA: Turn On Light",
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [3980, 160],
      "id": "ha-light-on-001",
      "credentials": {
        "homeAssistantApi": {
          "id": "YOUR_HA_CREDENTIAL_ID",
          "name": "Home Assistant"
        }
      },
      "notes": "–í–∫–ª—é—á–∞–µ—Ç —Å–≤–µ—Ç –≤ HA"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "disable_web_page_preview": true,
          "append_attribution": false
        }
      },
      "name": "Telegram: Reply",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [4200, 400],
      "id": "telegram-reply-001",
      "webhookId": "reply-webhook",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"
    }
  ],
  "connections": {
    "Telegram: Trigger": {
      "main": [[{"node": "Check: Voice or Text?", "type": "main", "index": 0}]]
    },
    "Check: Voice or Text?": {
      "main": [
        [{"node": "Telegram: Get Voice File", "type": "main", "index": 0}],
        [{"node": "Extract: Text Message", "type": "main", "index": 0}]
      ]
    },
    "Telegram: Get Voice File": {
      "main": [[{"node": "Yandex: SpeechKit STT", "type": "main", "index": 0}]]
    },
    "Yandex: SpeechKit STT": {
      "main": [[{"node": "Extract: Transcribed Text", "type": "main", "index": 0}]]
    },
    "Extract: Transcribed Text": {
      "main": [[{"node": "Merge: Voice + Text", "type": "main", "index": 0}]]
    },
    "Extract: Text Message": {
      "main": [[{"node": "Merge: Voice + Text", "type": "main", "index": 1}]]
    },
    "Merge: Voice + Text": {
      "main": [[{"node": "Check: Commands", "type": "main", "index": 0}]]
    },
    "Check: Commands": {
      "main": [[{"node": "If: Is Command?", "type": "main", "index": 0}]]
    },
    "If: Is Command?": {
      "main": [
        [{"node": "Telegram: Reply", "type": "main", "index": 0}],
        [{"node": "Prepare: HA Tools", "type": "main", "index": 0}]
      ]
    },
    "Prepare: HA Tools": {
      "main": [[{"node": "YandexGPT: Chat", "type": "main", "index": 0}]]
    },
    "YandexGPT: Chat": {
      "main": [[{"node": "Check: YandexGPT Error?", "type": "main", "index": 0}]]
    },
    "Check: YandexGPT Error?": {
      "main": [
        [{"node": "GigaChat: UUID", "type": "main", "index": 0}],
        [{"node": "Parse: YandexGPT Response", "type": "main", "index": 0}]
      ]
    },
    "GigaChat: UUID": {
      "main": [[{"node": "GigaChat: Get Token", "type": "main", "index": 0}]]
    },
    "GigaChat: Get Token": {
      "main": [[{"node": "GigaChat: Prepare Request", "type": "main", "index": 0}]]
    },
    "GigaChat: Prepare Request": {
      "main": [[{"node": "GigaChat: Chat", "type": "main", "index": 0}]]
    },
    "GigaChat: Chat": {
      "main": [[{"node": "Parse: GigaChat Response", "type": "main", "index": 0}]]
    },
    "Parse: YandexGPT Response": {
      "main": [[{"node": "Merge: LLM Responses", "type": "main", "index": 0}]]
    },
    "Parse: GigaChat Response": {
      "main": [[{"node": "Merge: LLM Responses", "type": "main", "index": 1}]]
    },
    "Merge: LLM Responses": {
      "main": [[{"node": "Check: Has Function Call?", "type": "main", "index": 0}]]
    },
    "Check: Has Function Call?": {
      "main": [
        [{"node": "Route: Function Call", "type": "main", "index": 0}],
        [{"node": "Telegram: Reply", "type": "main", "index": 0}]
      ]
    },
    "Route: Function Call": {
      "main": [[{"node": "Switch: Function Type", "type": "main", "index": 0}]]
    },
    "Switch: Function Type": {
      "main": [
        [{"node": "HA: Turn On Light", "type": "main", "index": 0}]
      ]
    },
    "HA: Turn On Light": {
      "main": [[{"node": "Telegram: Reply", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "voice-assistant-v1",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "voice-assistant-template"
  },
  "tags": []
}
