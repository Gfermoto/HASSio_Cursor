{
  "name": "üå§Ô∏è –ü–æ–≥–æ–¥–∞: –ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è + AI (GigaChat + –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 7 * * *"
            }
          ]
        }
      },
      "name": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 07:00",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        500
      ],
      "notes": "–ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:00. –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è."
    },
    {
      "parameters": {
        "resource": "state",
        "operation": "getAll",
        "returnAll": true
      },
      "name": "HA: –í—Å–µ –¥–∞—Ç—á–∏–∫–∏",
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [
        450,
        500
      ],
      "credentials": {
        "homeAssistantApi": {
          "id": "YOUR_HA_CREDENTIAL_ID",
          "name": "Home Assistant"
        }
      },
      "notes": "–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ Home Assistant. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ credential —Å –≤–∞—à–∏–º HA."
    },
    {
      "parameters": {
        "jsCode": "// –ù–ê–°–¢–†–û–ô–¢–ï: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ –≤–∞—à–∏!\nconst sensorMap = {\n  'sensor.ws2350_v2_37_outdoor_temperature': 'temp',\n  'sensor.ws2350_v2_37_feels_like_temperature': 'feels_like',\n  'sensor.ws2350_v2_37_humidity': 'humidity',\n  'sensor.ws2350_v2_37_dewpoint': 'dewpoint',\n  'sensor.ws2350_v2_37_wind_speed': 'wind_speed',\n  'sensor.ws2350_v2_37_wind_direction': 'wind_direction',\n  'sensor.ws2350_v2_37_wind_gust': 'wind_gust',\n  'sensor.ws2350_v2_37_absolute_pressure': 'pressure',\n  'sensor.ws2350_v2_37_rain_rate': 'rain_rate',\n  'sensor.ws2350_v2_37_daily_rain_rate': 'daily_rain',\n  'sensor.ws2350_v2_37_uv_index': 'uv_index',\n  'sensor.gw2000a_soil_moisture_1': 'soil_moisture',\n  'sensor.gw2000a_soil_temperature_1': 'soil_temp',\n  'sensor.gw2000a_pm2_5_1': 'air_quality',\n  'sensor.radsens_dynamic_intensity': 'radiation'\n};\n\nconst weather = {};\nlet found = 0;\n\nconst items = $input.all();\nitems.forEach(item => {\n  const entityId = item.json.entity_id || item.json.id;\n  const state = item.json.state;\n  const key = sensorMap[entityId];\n  \n  if (key && state !== undefined && state !== 'unavailable' && state !== 'unknown') {\n    const value = parseFloat(state);\n    weather[key] = isNaN(value) ? state : value;\n    found++;\n  }\n});\n\nconsole.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç—á–∏–∫–æ–≤:', found);\nconsole.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(weather).substring(0, 200));\n\nreturn [{ json: { local_weather: weather } }];"
      },
      "name": "–§–∏–ª—å—Ç—Ä –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        500
      ],
      "notes": "–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏. –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ –Ω–∞ –≤–∞—à–∏!"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.weather.yandex.ru/v2/forecast?lat=YOUR_LATITUDE&lon=YOUR_LONGITUDE",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Yandex-Weather-Key",
              "value": "YOUR_YANDEX_WEATHER_API_KEY"
            }
          ]
        },
        "options": {}
      },
      "name": "–Ø–Ω–¥–µ–∫—Å: –ü—Ä–æ–≥–Ω–æ–∑",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        250,
        700
      ],
      "notes": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç REST API v2. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_YANDEX_WEATHER_API_KEY, YOUR_LATITUDE, YOUR_LONGITUDE"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://YOUR_ALLSKY_IP/indi-allsky/images/latest.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "allowUnauthorizedCerts": true
        }
      },
      "name": "HTTP: Allsky —Å–Ω–∏–º–æ–∫",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        250,
        900
      ],
      "notes": "–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏–º–æ–∫ allsky —á–µ—Ä–µ–∑ HTTP GET –∑–∞–ø—Ä–æ—Å. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_ALLSKY_IP"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByIndex",
        "numberOfInputs": 3,
        "options": {}
      },
      "name": "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        850,
        600
      ],
      "notes": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏ (index 0), –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞ (index 1) –∏ HTTP allsky —Å–Ω–∏–º–æ–∫ (index 2)"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// –° combineByPosition –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö:\n// items[0] - –¥–∞–Ω–Ω—ã–µ –æ—Ç HA (index 0 –≤ connections)\n// items[1] - –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å (index 1 –≤ connections)\n// items[2] - –¥–∞–Ω–Ω—ã–µ –æ—Ç HTTP Allsky (index 2 –≤ connections)\n\nconst haData = items[0]?.json;\nconst yandexData = items[1]?.json;\nconst httpData = items[2]?.json;\n\nlet local = null;\nlet yandex = null;\nlet allskyImage = null;\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç HA\nif (haData?.local_weather) {\n  local = haData.local_weather;\n}\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å (REST API v2)\nif (yandexData) {\n  yandex = yandexData;\n  console.log('‚úÖ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', yandexData.fact?.temp + '¬∞C');\n  console.log('üìä –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤—Ç—Ä–∞:', JSON.stringify(yandex.forecasts?.[1]?.parts).substring(0, 200));\n}\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç HTTP Allsky\nif (httpData) {\n  if (httpData.data) {\n    // HTTP Request —Å responseFormat: file –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Buffer –≤ data\n    try {\n      allskyImage = httpData.data;\n      console.log('‚úÖ Allsky –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä:', allskyImage.length, '–±–∞–π—Ç');\n    } catch(e) {\n      console.log('‚ùå HTTP image decode error:', e);\n    }\n  } else if (httpData.binary) {\n    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ binary\n    try {\n      allskyImage = httpData.binary.data;\n      console.log('‚úÖ Allsky –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ binary, —Ä–∞–∑–º–µ—Ä:', allskyImage.length, '–±–∞–π—Ç');\n    } catch(e) {\n      console.log('‚ùå Binary decode error:', e);\n    }\n  }\n}\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\nif (!local) {\n  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏');\n}\n\n// –ï—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback\nif (!yandex) {\n  console.log('‚ö†Ô∏è –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—é');\n  return [{\n    json: {\n      local: local,\n      yandex_now: `${local.temp}¬∞C, –º–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`,\n      forecast_today: '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)',\n      forecast_tomorrow_day: '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',\n      forecast_tomorrow_night: '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',\n      allsky_image: allskyImage,\n      has_allsky: !!allskyImage\n    }\n  }];\n}\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å (REST API v2)\n// –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —É—Å–ª–æ–≤–∏–π –ø–æ–≥–æ–¥—ã –Ø–Ω–¥–µ–∫—Å\nconst conditions = {\n  'clear': '—è—Å–Ω–æ',\n  'partly-cloudy': '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',\n  'cloudy': '–æ–±–ª–∞—á–Ω–æ',\n  'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ',\n  'drizzle': '–º–æ—Ä–æ—Å—å',\n  'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',\n  'rain': '–¥–æ–∂–¥—å',\n  'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',\n  'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',\n  'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',\n  'showers': '–ª–∏–≤–µ–Ω—å',\n  'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º',\n  'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',\n  'snow': '—Å–Ω–µ–≥',\n  'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥',\n  'hail': '–≥—Ä–∞–¥',\n  'thunderstorm': '–≥—Ä–æ–∑–∞',\n  'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',\n  'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'\n};\n\n// REST API v2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { fact: { temp, condition }, forecasts: [{ parts: { day: {...}, night: {...} } }] }\nconst nowTemp = yandex.fact?.temp || 'N/A';\nconst nowCondition = conditions[yandex.fact?.condition] || yandex.fact?.condition || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';\n\n// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å –≤ –º–∞—Å—Å–∏–≤–µ forecasts)\nconst tomorrow = yandex.forecasts?.[1]?.parts || {};\nconst tomorrowDay = tomorrow.day || {};\nconst tomorrowNight = tomorrow.night || {};\n\nconsole.log('üîç –î–µ–Ω—å –∑–∞–≤—Ç—Ä–∞:', JSON.stringify(tomorrowDay));\nconsole.log('üîç –ù–æ—á—å –∑–∞–≤—Ç—Ä–∞:', JSON.stringify(tomorrowNight));\n\nconst tomorrowDayTemp = tomorrowDay.temp_min !== undefined && tomorrowDay.temp_max !== undefined ? \n  `${tomorrowDay.temp_min}..${tomorrowDay.temp_max}¬∞C` : \n  (tomorrowDay.temp_avg !== undefined ? `${tomorrowDay.temp_avg}¬∞C` : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');\n\nconst tomorrowDayCondition = conditions[tomorrowDay.condition] || tomorrowDay.condition || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';\n\nconst tomorrowNightTemp = tomorrowNight.temp_min !== undefined && tomorrowNight.temp_max !== undefined ? \n  `${tomorrowNight.temp_min}..${tomorrowNight.temp_max}¬∞C` : \n  (tomorrowNight.temp_avg !== undefined ? `${tomorrowNight.temp_avg}¬∞C` : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');\n\nconst tomorrowNightCondition = conditions[tomorrowNight.condition] || tomorrowNight.condition || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';\n\nreturn [{\n  json: {\n    local: local,\n    yandex_now: `${nowTemp}¬∞C, ${nowCondition}`,\n    forecast_today: `–°–µ–π—á–∞—Å: ${nowTemp}¬∞C, ${nowCondition}`,\n    forecast_tomorrow_day: `${tomorrowDayTemp}, ${tomorrowDayCondition}`,\n    forecast_tomorrow_night: `${tomorrowNightTemp}, ${tomorrowNightCondition}`,\n    allsky_image: allskyImage,\n    has_allsky: !!allskyImage\n  }\n}];"
      },
      "name": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1050,
        600
      ],
      "notes": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI"
    },
    {
      "parameters": {
        "jsCode": "function generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nreturn [{ json: { uuid: generateUUID(), data: $input.item.json } }];"
      },
      "name": "UUID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1250,
        600
      ],
      "notes": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID –¥–ª—è GigaChat OAuth"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "RqUID",
              "value": "={{$json.uuid}}"
            },
            {
              "name": "Authorization",
              "value": "Basic YOUR_GIGACHAT_AUTHORIZATION_KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "scope",
              "value": "GIGACHAT_API_PERS"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GigaChat: –¢–æ–∫–µ–Ω",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1450,
        600
      ],
      "notes": "–ó–ê–ú–ï–ù–ò–¢–ï: YOUR_GIGACHAT_AUTHORIZATION_KEY (–∏–∑ config.yml)"
    },
    {
      "parameters": {
        "jsCode": "const d = $node[\"UUID\"].json.data;\nconst token = $input.item.json.access_token;\nconst local = d.local;\n\nconst windDirs = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó'];\nconst windDir = windDirs[Math.round((local.wind_direction % 360) / 45) % 8];\nconst pressure = (local.pressure * 0.750062).toFixed(0);\n\nconst prompt = `–ü—Ä–æ–≥–Ω–æ–∑ –ö–ü. –¢–æ–ª—å–∫–æ –ü–û–õ–ï–ó–ù–û–ï.\n\n–°–ï–ô–ß–ê–°: ${local.temp}¬∞C (–æ—â—É—â. ${local.feels_like}¬∞C), –≤–ª–∞–∂–Ω. ${local.humidity}%, –≤–µ—Ç–µ—Ä ${local.wind_speed} –º/—Å ${windDir}, –¥–∞–≤–ª. ${pressure} –º–º, –æ—Å–∞–¥–∫–∏ ${local.daily_rain} –º–º, –ø–æ—á–≤–∞ ${local.soil_moisture}%\n\n–Ø–ù–î–ï–ö–°: ${d.yandex_now}\n–ó–ê–í–¢–†–ê: –î–µ–Ω—å ${d.forecast_tomorrow_day}, –ù–æ—á—å ${d.forecast_tomorrow_night}\n\n–§–û–†–ú–ê–¢:\nüìä –ü–†–û–ì–ù–û–ó: [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ —Å–µ–≥–æ–¥–Ω—è+–∑–∞–≤—Ç—Ä–∞]\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n‚Ä¢ –û–¥–µ–∂–¥–∞: [—á—Ç–æ –Ω–∞–¥–µ—Ç—å]\n‚Ä¢ –ó–æ–Ω—Ç: [–±—Ä–∞—Ç—å/–Ω–µ –±—Ä–∞—Ç—å]\n‚Ä¢ –ê–≤—Ç–æ: [–µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ - –ø—Ä–æ–≥—Ä–µ–≤/—Å—Ç—ë–∫–ª–∞/–¥–æ—Ä–æ–≥–∞]\n‚Ä¢ –î–æ–º: [–ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ/–æ—Ç–æ–ø–ª–µ–Ω–∏–µ]\n‚Ä¢ –û–≥–æ—Ä–æ–¥: [–ø–æ–ª–∏–≤ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ]\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: [—Ç–æ–ª—å–∫–æ –í–ê–ñ–ù–û–ï –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏]\n\n–¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n- 100 —Å–ª–æ–≤ MAX\n- –¢–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –†–ï–ê–õ–¨–ù–û –ø–æ–ª–µ–∑–Ω–æ\n- –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å –ø–æ –ø—É–Ω–∫—Ç—É - –ø—Ä–æ–ø—É—Å—Ç–∏ –µ–≥–æ\n- –ë–µ–∑ –≤–æ–¥—ã –∏ –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç–µ–π`;\n\nreturn [{\n  json: {\n    token: token,\n    request: {\n      model: \"GigaChat\",\n      messages: [\n        {role: \"system\", content: \"–¢—ã —Å–∏–Ω–æ–ø—Ç–∏–∫-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –ü–û–õ–ï–ó–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –æ–¥–µ–∂–¥–∞, –∑–æ–Ω—Ç, –∞–≤—Ç–æ, –¥–æ–º, –æ–≥–æ—Ä–æ–¥. –ö–†–ê–¢–ö–û. –ú–∞–∫—Å 120 —Å–ª–æ–≤. –ë–µ–∑ –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç–µ–π.\"},\n        {role: \"user\", content: prompt}\n      ],\n      temperature: 0.7,\n      max_tokens: 500\n    },\n    local: local\n  }\n}];"
      },
      "name": "AI: –ü—Ä–æ–º–ø—Ç",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1650,
        600
      ],
      "notes": "–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è GigaChat AI"
    },
    {
      "parameters": {
        "jsCode": "const prompt = $node[\"AI: –ü—Ä–æ–º–ø—Ç\"].json;\nconst data = $node[\"UUID\"].json.data;\n\n// –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ allsky, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∑–∞–ø—Ä–æ—Å—É\nif (data.allsky_image) {\n  let imageContent;\n  \n  if (data.allsky_image.startsWith('http')) {\n    // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n    imageContent = { type: \"image_url\", image_url: { url: data.allsky_image } };\n  } else if (typeof data.allsky_image === 'string') {\n    // Base64 —Å—Ç—Ä–æ–∫–∞\n    imageContent = { type: \"image_url\", image_url: { url: `data:image/jpeg;base64,${data.allsky_image}` } };\n  } else if (data.allsky_image.buffer) {\n    // Binary –¥–∞–Ω–Ω—ã–µ –∏–∑ Home Assistant\n    imageContent = { type: \"image_url\", image_url: { url: `data:image/jpeg;base64,${data.allsky_image.toString('base64')}` } };\n  }\n  \n  if (imageContent) {\n    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    prompt.request.messages[1].content = [\n      { type: \"text\", text: prompt.request.messages[1].content },\n      imageContent\n    ];\n  }\n}\n\nreturn [{\n  json: {\n    token: prompt.token,\n    request: prompt.request,\n    local: prompt.local\n  }\n}];"
      },
      "name": "AI: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1750,
        600
      ],
      "notes": "–î–æ–±–∞–≤–ª—è–µ—Ç allsky –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ GigaChat –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$json.token}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.request}}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GigaChat: –ê–Ω–∞–ª–∏–∑",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1850,
        600
      ],
      "notes": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GigaChat –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"
    },
    {
      "parameters": {
        "jsCode": "const ai = $input.item.json.choices[0].message.content;\nconst prompt = $node[\"AI: –ü—Ä–æ–º–ø—Ç\"].json;\nconst local = prompt.local;\n\nconst windDirs = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó'];\nconst windDir = windDirs[Math.round((local.wind_direction % 360) / 45) % 8];\nconst pressure = (local.pressure * 0.750062).toFixed(0);\n\nlet tempIcon = 'üå°Ô∏è';\nif (local.temp < 5) tempIcon = '‚ùÑÔ∏è';\nif (local.temp > 25) tempIcon = 'üî•';\n\nlet rainIcon = '‚òÄÔ∏è';\nif (local.daily_rain > 0) rainIcon = 'üåßÔ∏è';\nif (local.daily_rain > 5) rainIcon = '‚òîÔ∏è';\n\nlet airIcon = 'üòä';\nif (local.air_quality > 100) airIcon = 'üòê';\nif (local.air_quality > 150) airIcon = 'üò∑';\n\n// –ù–ê–°–¢–†–û–ô–¢–ï: –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ö–ü –∏ URL –Ω–∞ –≤–∞—à–∏\nconst msg = `üå§Ô∏è *–ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–´ [–í–ê–®–ï –ö–ü]*\n\n*–°–ï–ô–ß–ê–°:*\n${tempIcon} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *${local.temp}¬∞C* (–æ—â—É—â–∞–µ—Ç—Å—è *${local.feels_like}¬∞C*)\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: *${local.humidity}%* ‚Ä¢ üå°Ô∏èüí¶ –¢–æ—á–∫–∞ —Ä–æ—Å—ã: *${local.dewpoint}¬∞C*\nüå¨Ô∏è –í–µ—Ç–µ—Ä: *${local.wind_speed} –º/—Å ${windDir}* ‚Ä¢ üí® –ü–æ—Ä—ã–≤—ã: *${local.wind_gust} –º/—Å*\nüéà –î–∞–≤–ª–µ–Ω–∏–µ: *${pressure} –º–º —Ä—Ç.—Å—Ç.*\n${rainIcon} –û—Å–∞–¥–∫–∏: *${local.rain_rate} –º–º/—á* (–∑–∞ –¥–µ–Ω—å *${local.daily_rain} –º–º*)\n‚òÄÔ∏è –£–§-–∏–Ω–¥–µ–∫—Å: *${local.uv_index}*\n${airIcon} –í–æ–∑–¥—É—Ö PM2.5: *${local.air_quality}*\nüå± –ü–æ—á–≤–∞: *${local.soil_moisture}%* (${local.soil_temp}¬∞C)\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${ai}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n_[–ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è](YOUR_METEOSTATION_URL) ‚Ä¢ ${new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}_\n_LLM: GigaChat | –ü—Ä–æ–≥–Ω–æ–∑: –Ø–Ω–¥–µ–∫—Å. | AI –∞–≥–µ–Ω—Ç: n8n_`;\n\nreturn [{ json: { message: msg, local: local, ai_report: ai } }];"
      },
      "name": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2050,
        600
      ],
      "notes": "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ + AI –∞–Ω–∞–ª–∏–∑"
    },
    {
      "parameters": {
        "chatId": "YOUR_TELEGRAM_CHAT_ID",
        "text": "={{$json.message}}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "disable_web_page_preview": true,
          "append_attribution": false
        }
      },
      "name": "TG: –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2250,
        600
      ],
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–ó–ê–ú–ï–ù–ò–¢–ï: YOUR_TELEGRAM_CHAT_ID –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram credential"
    },
    {
      "parameters": {
        "resource": "state",
        "operation": "upsert",
        "entityId": "sensor.ai_weather_report",
        "state": "updated",
        "stateAttributes": "={{ { ai_report: $json.ai_report, temp: $json.local.temp, humidity: $json.local.humidity, pressure: $json.local.pressure, wind_speed: $json.local.wind_speed, air_quality: $json.local.air_quality, soil_moisture: $json.local.soil_moisture, updated_at: new Date().toISOString() } }}"
      },
      "name": "HA: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [
        2250,
        800
      ],
      "credentials": {
        "homeAssistantApi": {
          "id": "YOUR_HA_CREDENTIAL_ID",
          "name": "Home Assistant"
        }
      },
      "notes": "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç AI –æ—Ç—á–µ—Ç –≤ Home Assistant sensor"
    }
  ],
  "connections": {
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 07:00": {
      "main": [
        [
          {
            "node": "HA: –í—Å–µ –¥–∞—Ç—á–∏–∫–∏",
            "type": "main",
            "index": 0
          },
          {
            "node": "–Ø–Ω–¥–µ–∫—Å: –ü—Ä–æ–≥–Ω–æ–∑",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP: Allsky —Å–Ω–∏–º–æ–∫",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HA: –í—Å–µ –¥–∞—Ç—á–∏–∫–∏": {
      "main": [
        [
          {
            "node": "–§–∏–ª—å—Ç—Ä –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–§–∏–ª—å—Ç—Ä –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏": {
      "main": [
        [
          {
            "node": "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–Ø–Ω–¥–µ–∫—Å: –ü—Ä–æ–≥–Ω–æ–∑": {
      "main": [
        [
          {
            "node": "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP: Allsky —Å–Ω–∏–º–æ–∫": {
      "main": [
        [
          {
            "node": "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏": {
      "main": [
        [
          {
            "node": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ": {
      "main": [
        [
          {
            "node": "UUID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UUID": {
      "main": [
        [
          {
            "node": "GigaChat: –¢–æ–∫–µ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: –¢–æ–∫–µ–Ω": {
      "main": [
        [
          {
            "node": "AI: –ü—Ä–æ–º–ø—Ç",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI: –ü—Ä–æ–º–ø—Ç": {
      "main": [
        [
          {
            "node": "AI: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": {
      "main": [
        [
          {
            "node": "GigaChat: –ê–Ω–∞–ª–∏–∑",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: –ê–Ω–∞–ª–∏–∑": {
      "main": [
        [
          {
            "node": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å": {
      "main": [
        [
          {
            "node": "TG: –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            "type": "main",
            "index": 0
          },
          {
            "node": "HA: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "tags": []
}
