{
  "name": "ü§ñ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: HA + GigaChat (100% –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"],
        "additionalFields": {
          "download": false,
          "userIds": "YOUR_TELEGRAM_USER_ID"
        }
      },
      "name": "Telegram: Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [240, 400],
      "id": "telegram-trigger-001",
      "webhookId": "voice-assistant-webhook",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–ü—Ä–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_TELEGRAM_USER_ID, YOUR_TELEGRAM_CREDENTIAL_ID"
    },
    {
      "parameters": {
        "jsCode": "// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\nconst text = $input.item.json.message.text;\nconst chatId = $input.item.json.message.chat.id;\n\nif (!text) {\n  return [{ json: { error: true, text: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', chat_id: chatId } }];\n}\n\nif (text === '/clear') {\n  return [{ json: { isCommand: true, command: 'clear', chat_id: chatId, text: 'üóëÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω' } }];\n}\n\nif (text === '/help') {\n  const helpText = `ü§ñ *–¢–µ–∫—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Home Assistant*\\n\\n*–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\\n‚Ä¢ –í–∫–ª—é—á–∏/–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç [–∫–æ–º–Ω–∞—Ç–∞]\\n‚Ä¢ –°–¥–µ–ª–∞–π —Ç–µ–ø–ª–µ–µ/—Ö–æ–ª–æ–¥–Ω–µ–µ –≤ [–∫–æ–º–Ω–∞—Ç–∞]\\n‚Ä¢ –ó–∞–ø—É—Å—Ç–∏ —Å—Ü–µ–Ω—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]\\n‚Ä¢ –ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ [–∫–æ–º–Ω–∞—Ç–∞]?\\n‚Ä¢ –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å [—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ]\\n\\n*–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\\n\\nüí° *–°–æ–≤–µ—Ç:* –ü–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!\\n\\nüìù *–ü—Ä–∏–º–µ—Ä—ã:*\\n‚Ä¢ \"–í–∫–ª—é—á–∏ —Å–≤–µ—Ç –Ω–∞ –∫—É—Ö–Ω–µ\"\\n‚Ä¢ \"–°–¥–µ–ª–∞–π –≤ —Å–ø–∞–ª—å–Ω–µ 22 –≥—Ä–∞–¥—É—Å–∞\"\\n‚Ä¢ \"–ó–∞–ø—É—Å—Ç–∏ –≤–µ—á–µ—Ä–Ω–∏–π —Ä–µ–∂–∏–º\"\\n‚Ä¢ \"–í—ã–∫–ª—é—á–∏ –≤—Å–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ –≤ –¥–æ–º–µ\"`;\n  return [{ json: { isCommand: true, command: 'help', chat_id: chatId, text: helpText } }];\n}\n\nreturn [{ json: { isCommand: false, text: text, chat_id: chatId } }];"
      },
      "name": "Check: Commands",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 400],
      "id": "check-commands-001",
      "notes": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/help, /clear)"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isCommand }}",
              "value2": true
            }
          ]
        }
      },
      "name": "If: Is Command?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [680, 400],
      "id": "if-command-001",
      "notes": "–†–∞–∑–¥–µ–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
    },
    {
      "parameters": {
        "jsCode": "function generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nreturn [{ json: { uuid: generateUUID(), text: $input.item.json.text, chat_id: $input.item.json.chat_id } }];"
      },
      "name": "GigaChat: UUID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 520],
      "id": "gigachat-uuid-001",
      "notes": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID –¥–ª—è GigaChat OAuth"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "RqUID",
              "value": "={{$json.uuid}}"
            },
            {
              "name": "Authorization",
              "value": "Basic YOUR_GIGACHAT_AUTHORIZATION_KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "scope",
              "value": "GIGACHAT_API_PERS"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GigaChat: Get Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 520],
      "id": "gigachat-token-001",
      "notes": "–ü–æ–ª—É—á–∞–µ—Ç access token –¥–ª—è GigaChat. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_GIGACHAT_AUTHORIZATION_KEY"
    },
    {
      "parameters": {
        "jsCode": "// Home Assistant Tools –¥–ª—è GigaChat\nconst functions = [\n  {\n    name: \"turn_on_light\",\n    description: \"–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        entity_id: {\n          type: \"string\",\n          description: \"ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: light.kitchen)\"\n        },\n        brightness: {\n          type: \"number\",\n          description: \"–Ø—Ä–∫–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –æ—Ç 0 –¥–æ 255 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\"\n        }\n      },\n      required: [\"entity_id\"]\n    }\n  },\n  {\n    name: \"turn_off_light\",\n    description: \"–í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        entity_id: {\n          type: \"string\",\n          description: \"ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: light.kitchen)\"\n        }\n      },\n      required: [\"entity_id\"]\n    }\n  },\n  {\n    name: \"set_temperature\",\n    description: \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        entity_id: {\n          type: \"string\",\n          description: \"ID –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: climate.bedroom)\"\n        },\n        temperature: {\n          type: \"number\",\n          description: \"–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è\"\n        }\n      },\n      required: [\"entity_id\", \"temperature\"]\n    }\n  },\n  {\n    name: \"activate_scene\",\n    description: \"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É (scene) –≤ Home Assistant\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        entity_id: {\n          type: \"string\",\n          description: \"ID —Å—Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: scene.evening)\"\n        }\n      },\n      required: [\"entity_id\"]\n    }\n  },\n  {\n    name: \"get_state\",\n    description: \"–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –¥–∞—Ç—á–∏–∫–∞\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        entity_id: {\n          type: \"string\",\n          description: \"ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –¥–∞—Ç—á–∏–∫–∞\"\n        }\n      },\n      required: [\"entity_id\"]\n    }\n  }\n];\n\nconst uuidData = $('GigaChat: UUID').first().json;\nconst token = $input.item.json.access_token;\n\nconst request = {\n  model: \"GigaChat\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–º–Ω–æ–≥–æ –¥–æ–º–∞ Home Assistant. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–µ—Ç–æ–º, –∫–ª–∏–º–∞—Ç–æ–º, —Å—Ü–µ–Ω–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –°–µ–≥–æ–¥–Ω—è \" + new Date().toLocaleString('ru-RU', {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'}) + \".\"\n    },\n    {\n      role: \"user\",\n      content: uuidData.text\n    }\n  ],\n  functions: functions,\n  temperature: 0.7,\n  max_tokens: 500\n};\n\nreturn [{ json: { token, request, chat_id: uuidData.chat_id, user_text: uuidData.text } }];"
      },
      "name": "GigaChat: Prepare Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 520],
      "id": "gigachat-prepare-001",
      "notes": "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ GigaChat —Å 5 HA tools"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$json.token}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.request}}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GigaChat: Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 520],
      "id": "gigachat-chat-001",
      "notes": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GigaChat –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"
    },
    {
      "parameters": {
        "jsCode": "// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat\nconst response = $input.item.json;\nconst prepData = $('GigaChat: Prepare Request').first().json;\nconst chatId = prepData.chat_id;\n\nlet text = '';\nlet functionCall = null;\nlet needsExecution = false;\n\nif (response.choices && response.choices.length > 0) {\n  const choice = response.choices[0];\n  \n  if (choice.message.function_call) {\n    functionCall = {\n      name: choice.message.function_call.name,\n      arguments: JSON.parse(choice.message.function_call.arguments || '{}')\n    };\n    needsExecution = true;\n    text = choice.message.content || '–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...';\n  } else {\n    text = choice.message.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.';\n  }\n} else {\n  text = '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';\n}\n\nreturn [{ json: { text, functionCall, chat_id: chatId, needsExecution } }];"
      },
      "name": "Parse: GigaChat Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 520],
      "id": "parse-gigachat-001",
      "notes": "–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç GigaChat –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç function_call"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsExecution }}",
              "value2": true
            }
          ]
        }
      },
      "name": "If: Needs HA Execution?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [2000, 520],
      "id": "if-execution-001",
      "notes": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ HA"
    },
    {
      "parameters": {
        "jsCode": "// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É HA —á–µ—Ä–µ–∑ API\nconst functionCall = $input.item.json.functionCall;\nconst chatId = $input.item.json.chat_id;\n\nif (!functionCall) {\n  return [{ json: { error: true, text: '–ù–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', chat_id: chatId } }];\n}\n\nconst fname = functionCall.name;\nconst args = functionCall.arguments;\n\nlet service = '';\nlet domain = '';\nlet serviceData = {};\n\n// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∫ HA —Å–µ—Ä–≤–∏—Å–∞–º\nswitch(fname) {\n  case 'turn_on_light':\n    domain = 'light';\n    service = 'turn_on';\n    serviceData = { entity_id: args.entity_id };\n    if (args.brightness) serviceData.brightness = args.brightness;\n    break;\n    \n  case 'turn_off_light':\n    domain = 'light';\n    service = 'turn_off';\n    serviceData = { entity_id: args.entity_id };\n    break;\n    \n  case 'set_temperature':\n    domain = 'climate';\n    service = 'set_temperature';\n    serviceData = { entity_id: args.entity_id, temperature: args.temperature };\n    break;\n    \n  case 'activate_scene':\n    domain = 'scene';\n    service = 'turn_on';\n    serviceData = { entity_id: args.entity_id };\n    break;\n    \n  case 'get_state':\n    // –î–ª—è get_state –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥\n    return [{ json: { \n      action: 'get_state', \n      entity_id: args.entity_id,\n      chat_id: chatId\n    }}];\n    \n  default:\n    return [{ json: { error: true, text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${fname}`, chat_id: chatId } }];\n}\n\nreturn [{ json: { \n  action: 'call_service',\n  domain, \n  service, \n  service_data: serviceData,\n  chat_id: chatId,\n  original_text: $('Parse: GigaChat Response').first().json.text\n}}];"
      },
      "name": "Execute: HA Command",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 400],
      "id": "execute-ha-001",
      "notes": "–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ Home Assistant —á–µ—Ä–µ–∑ service call"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equals",
              "value2": "call_service"
            }
          ]
        }
      },
      "name": "Switch: Action Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [2440, 400],
      "id": "switch-action-001",
      "notes": "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: service call –∏–ª–∏ get_state"
    },
    {
      "parameters": {
        "resource": "service",
        "domain": "={{ $json.domain }}",
        "service": "={{ $json.service }}",
        "serviceAttributes": "={{ $json.service_data }}"
      },
      "name": "HA: Call Service",
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [2660, 300],
      "id": "ha-service-001",
      "credentials": {
        "homeAssistantApi": {
          "id": "YOUR_HA_CREDENTIAL_ID",
          "name": "Home Assistant"
        }
      },
      "notes": "–í—ã–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –≤ Home Assistant. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_HA_CREDENTIAL_ID"
    },
    {
      "parameters": {
        "resource": "state",
        "operation": "get",
        "entityId": "={{ $json.entity_id }}"
      },
      "name": "HA: Get State",
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [2660, 500],
      "id": "ha-state-001",
      "credentials": {
        "homeAssistantApi": {
          "id": "YOUR_HA_CREDENTIAL_ID",
          "name": "Home Assistant"
        }
      },
      "notes": "–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Home Assistant"
    },
    {
      "parameters": {
        "jsCode": "// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\nconst execData = $('Execute: HA Command').first().json;\nconst originalText = execData.original_text || '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞';\n\nlet resultText = `‚úÖ ${originalText}`;\n\n// –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç HA\nif ($input.item.json.state !== undefined) {\n  const state = $input.item.json;\n  resultText = `üìä *${state.attributes?.friendly_name || state.entity_id}*\\n\\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.state}`;\n  \n  if (state.attributes?.temperature) {\n    resultText += `\\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${state.attributes.temperature}¬∞C`;\n  }\n  if (state.attributes?.brightness) {\n    const brightnessPercent = Math.round((state.attributes.brightness / 255) * 100);\n    resultText += `\\n–Ø—Ä–∫–æ—Å—Ç—å: ${brightnessPercent}%`;\n  }\n}\n\nreturn [{ json: { text: resultText, chat_id: execData.chat_id } }];"
      },
      "name": "Format: Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2880, 400],
      "id": "format-success-001",
      "notes": "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "name": "Merge: All Responses",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [3100, 500],
      "id": "merge-responses-001",
      "notes": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "disable_web_page_preview": true,
          "append_attribution": false
        }
      },
      "name": "Telegram: Reply",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [3320, 500],
      "id": "telegram-reply-001",
      "webhookId": "reply-webhook",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"
    }
  ],
  "connections": {
    "Telegram: Trigger": {
      "main": [[{"node": "Check: Commands", "type": "main", "index": 0}]]
    },
    "Check: Commands": {
      "main": [[{"node": "If: Is Command?", "type": "main", "index": 0}]]
    },
    "If: Is Command?": {
      "main": [
        [{"node": "Merge: All Responses", "type": "main", "index": 0}],
        [{"node": "GigaChat: UUID", "type": "main", "index": 0}]
      ]
    },
    "GigaChat: UUID": {
      "main": [[{"node": "GigaChat: Get Token", "type": "main", "index": 0}]]
    },
    "GigaChat: Get Token": {
      "main": [[{"node": "GigaChat: Prepare Request", "type": "main", "index": 0}]]
    },
    "GigaChat: Prepare Request": {
      "main": [[{"node": "GigaChat: Chat", "type": "main", "index": 0}]]
    },
    "GigaChat: Chat": {
      "main": [[{"node": "Parse: GigaChat Response", "type": "main", "index": 0}]]
    },
    "Parse: GigaChat Response": {
      "main": [[{"node": "If: Needs HA Execution?", "type": "main", "index": 0}]]
    },
    "If: Needs HA Execution?": {
      "main": [
        [{"node": "Execute: HA Command", "type": "main", "index": 0}],
        [{"node": "Merge: All Responses", "type": "main", "index": 1}]
      ]
    },
    "Execute: HA Command": {
      "main": [[{"node": "Switch: Action Type", "type": "main", "index": 0}]]
    },
    "Switch: Action Type": {
      "main": [
        [{"node": "HA: Call Service", "type": "main", "index": 0}],
        [{"node": "HA: Get State", "type": "main", "index": 0}]
      ]
    },
    "HA: Call Service": {
      "main": [[{"node": "Format: Success Response", "type": "main", "index": 0}]]
    },
    "HA: Get State": {
      "main": [[{"node": "Format: Success Response", "type": "main", "index": 0}]]
    },
    "Format: Success Response": {
      "main": [[{"node": "Merge: All Responses", "type": "main", "index": 2}]]
    },
    "Merge: All Responses": {
      "main": [[{"node": "Telegram: Reply", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "voice-assistant-free-v1",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "voice-assistant-free-template"
  },
  "tags": []
}
