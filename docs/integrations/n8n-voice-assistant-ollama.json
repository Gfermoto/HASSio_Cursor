{
  "name": "ü§ñ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: HA + Ollama (–ª–æ–∫–∞–ª—å–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω–æ)",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"],
        "additionalFields": {
          "download": false,
          "userIds": "YOUR_TELEGRAM_USER_ID"
        }
      },
      "name": "Telegram: Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [240, 400],
      "id": "telegram-trigger-001",
      "webhookId": "ollama-assistant-webhook",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–ü—Ä–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_TELEGRAM_USER_ID, YOUR_TELEGRAM_CREDENTIAL_ID"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.item.json.message.text;\nconst chatId = $input.item.json.message.chat.id;\n\nif (!text) {\n  return [{ json: { error: true, text: '‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', chat_id: chatId } }];\n}\n\nif (text === '/help' || text === '/start') {\n  const helpText = `ü§ñ *–¢–µ–∫—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Home Assistant + Ollama*\\n\\n*–ö–æ–º–∞–Ω–¥—ã:*\\n‚Ä¢ –í–∫–ª—é—á–∏/–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç [–∫–æ–º–Ω–∞—Ç–∞]\\n‚Ä¢ –°–¥–µ–ª–∞–π —Ç–µ–ø–ª–µ–µ –≤ [–∫–æ–º–Ω–∞—Ç–∞]\\n‚Ä¢ –ó–∞–ø—É—Å—Ç–∏ —Å—Ü–µ–Ω—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]\\n‚Ä¢ –ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?\\n\\n*–°–∏—Å—Ç–µ–º–Ω—ã–µ:*\\n/help - —Å–ø—Ä–∞–≤–∫–∞\\n/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\\n\\nüìù *–ü—Ä–∏–º–µ—Ä—ã:*\\n‚Ä¢ \\\"–í–∫–ª—é—á–∏ —Å–≤–µ—Ç –Ω–∞ –∫—É—Ö–Ω–µ\\\"\\n‚Ä¢ \\\"–°–¥–µ–ª–∞–π 22 –≥—Ä–∞–¥—É—Å–∞\\\"\\n‚Ä¢ \\\"–ó–∞–ø—É—Å—Ç–∏ –≤–µ—á–µ—Ä–Ω–∏–π —Ä–µ–∂–∏–º\\\"\\n\\nüîí *100% –ª–æ–∫–∞–ª—å–Ω–æ - Ollama phi3:mini*`;\n  return [{ json: { isCommand: true, chat_id: chatId, response: helpText } }];\n}\n\nif (text === '/clear') {\n  return [{ json: { isCommand: true, chat_id: chatId, response: 'üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!' } }];\n}\n\nreturn [{ json: { isCommand: false, text: text, chat_id: chatId } }];"
      },
      "name": "Check: Commands",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 400],
      "id": "check-commands-001",
      "notes": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/help, /clear)"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isCommand }}",
              "value2": true
            }
          ]
        }
      },
      "name": "If: Is Command?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [680, 400],
      "id": "if-is-command-001"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.response }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Telegram: Send Command Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [900, 280],
      "id": "telegram-send-command-001",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "chat_id",
              "name": "chat_id",
              "value": "={{ $json.chat_id }}",
              "type": "string"
            },
            {
              "id": "user_message",
              "name": "user_message",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "Prepare: Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [900, 520],
      "id": "prepare-context-001",
      "notes": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI Agent"
    },
    {
      "parameters": {
        "url": "http://YOUR_HA_IP:8123/api/states",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "name": "HA: Get All States",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 520],
      "id": "ha-get-states-001",
      "credentials": {
        "httpHeaderAuth": {
          "id": "YOUR_HA_CREDENTIAL_ID",
          "name": "Home Assistant API"
        }
      },
      "notes": "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ HA. –ó–ê–ú–ï–ù–ò–¢–ï: YOUR_HA_IP, YOUR_HA_CREDENTIAL_ID"
    },
    {
      "parameters": {
        "jsCode": "const states = $input.item.json;\nconst devices = {};\n\n// –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\nconst allowedDomains = ['light', 'switch', 'climate', 'sensor', 'binary_sensor', 'scene'];\n\nstates.forEach(entity => {\n  const domain = entity.entity_id.split('.')[0];\n  \n  if (allowedDomains.includes(domain)) {\n    devices[entity.entity_id] = {\n      name: entity.attributes.friendly_name || entity.entity_id,\n      state: entity.state,\n      domain: domain,\n      attributes: entity.attributes\n    };\n  }\n});\n\nreturn [{ json: { devices: devices } }];"
      },
      "name": "Filter: Devices",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 520],
      "id": "filter-devices-001",
      "notes": "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    },
    {
      "parameters": {
        "model": "phi3:mini",
        "options": {
          "baseURL": "http://YOUR_OLLAMA_IP:11434",
          "temperature": 0.7,
          "maxTokens": 500
        }
      },
      "name": "Ollama: Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [1560, 640],
      "id": "ollama-model-001",
      "notes": "–ù–ê–°–¢–†–û–ô–¢–ï: YOUR_OLLAMA_IP (IP LXC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å Ollama)"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Prepare: Context').item.json.chat_id }}",
        "contextWindowLength": 10
      },
      "name": "Memory: Window Buffer",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [1560, 760],
      "id": "memory-buffer-001",
      "notes": "–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ (10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"
    },
    {
      "parameters": {
        "name": "turn_on_light",
        "description": "–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: entity_id (–Ω–∞–ø—Ä–∏–º–µ—Ä light.kitchen)",
        "workflowId": "YOUR_WORKFLOW_ID_TURN_ON"
      },
      "name": "Tool: Turn On Light",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 880],
      "id": "tool-turn-on-001",
      "notes": "–°–û–ó–î–ê–ô–¢–ï –æ—Ç–¥–µ–ª—å–Ω—ã–π workflow –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞"
    },
    {
      "parameters": {
        "name": "turn_off_light",
        "description": "–í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: entity_id (–Ω–∞–ø—Ä–∏–º–µ—Ä light.kitchen)",
        "workflowId": "YOUR_WORKFLOW_ID_TURN_OFF"
      },
      "name": "Tool: Turn Off Light",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 1000],
      "id": "tool-turn-off-001",
      "notes": "–°–û–ó–î–ê–ô–¢–ï –æ—Ç–¥–µ–ª—å–Ω—ã–π workflow –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞"
    },
    {
      "parameters": {
        "name": "set_temperature",
        "description": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–ª–∏–º–∞—Ç–∞. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: entity_id, temperature (—á–∏—Å–ª–æ)",
        "workflowId": "YOUR_WORKFLOW_ID_CLIMATE"
      },
      "name": "Tool: Set Temperature",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 1120],
      "id": "tool-climate-001",
      "notes": "–°–û–ó–î–ê–ô–¢–ï –æ—Ç–¥–µ–ª—å–Ω—ã–π workflow –¥–ª—è –∫–ª–∏–º–∞—Ç–∞"
    },
    {
      "parameters": {
        "name": "activate_scene",
        "description": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: entity_id (–Ω–∞–ø—Ä–∏–º–µ—Ä scene.evening)",
        "workflowId": "YOUR_WORKFLOW_ID_SCENE"
      },
      "name": "Tool: Activate Scene",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 1240],
      "id": "tool-scene-001",
      "notes": "–°–û–ó–î–ê–ô–¢–ï –æ—Ç–¥–µ–ª—å–Ω—ã–π workflow –¥–ª—è —Å—Ü–µ–Ω"
    },
    {
      "parameters": {
        "name": "get_sensor_state",
        "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: entity_id (–Ω–∞–ø—Ä–∏–º–µ—Ä sensor.temperature)",
        "workflowId": "YOUR_WORKFLOW_ID_SENSOR"
      },
      "name": "Tool: Get Sensor",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 1360],
      "id": "tool-sensor-001",
      "notes": "–°–û–ó–î–ê–ô–¢–ï –æ—Ç–¥–µ–ª—å–Ω—ã–π workflow –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤"
    },
    {
      "parameters": {
        "text": "={{ $('Prepare: Context').item.json.user_message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–º–Ω–æ–≥–æ –¥–æ–º–∞. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º Home Assistant:\n\n{{ $('Filter: Devices').item.json.devices | json }}\n\n–û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–π entity_id –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."
        }
      },
      "name": "Agent: AI Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [1780, 520],
      "id": "agent-assistant-001",
      "notes": "Langchain Agent —Å Ollama, Memory –∏ 5 HA Tools"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.item.json.output;\nconst chatId = $('Prepare: Context').item.json.chat_id;\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    text: response,\n    parse_mode: 'Markdown'\n  }\n}];"
      },
      "name": "Format: Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 520],
      "id": "format-response-001",
      "notes": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Telegram: Send AI Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2220, 520],
      "id": "telegram-send-ai-001",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot"
        }
      },
      "notes": "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –≤ Telegram"
    }
  ],
  "connections": {
    "Telegram: Trigger": {
      "main": [
        [
          {
            "node": "Check: Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check: Commands": {
      "main": [
        [
          {
            "node": "If: Is Command?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If: Is Command?": {
      "main": [
        [
          {
            "node": "Telegram: Send Command Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare: Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare: Context": {
      "main": [
        [
          {
            "node": "HA: Get All States",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HA: Get All States": {
      "main": [
        [
          {
            "node": "Filter: Devices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Devices": {
      "main": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama: Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory: Window Buffer": {
      "ai_memory": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Turn On Light": {
      "ai_tool": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Turn Off Light": {
      "ai_tool": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Set Temperature": {
      "ai_tool": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Activate Scene": {
      "ai_tool": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Get Sensor": {
      "ai_tool": [
        [
          {
            "node": "Agent: AI Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Agent: AI Assistant": {
      "main": [
        [
          {
            "node": "Format: Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format: Response": {
      "main": [
        [
          {
            "node": "Telegram: Send AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-10T12:00:00.000Z",
      "updatedAt": "2025-10-10T12:00:00.000Z",
      "id": "ollama-home-assistant",
      "name": "ollama"
    },
    {
      "createdAt": "2025-10-10T12:00:00.000Z",
      "updatedAt": "2025-10-10T12:00:00.000Z",
      "id": "home-assistant-local",
      "name": "home-assistant"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "your-n8n-instance"
  },
  "versionId": "voice-assistant-ollama-v1",
  "triggerCount": 1,
  "createdAt": "2025-10-10T12:00:00.000Z",
  "updatedAt": "2025-10-10T12:00:00.000Z"
}
