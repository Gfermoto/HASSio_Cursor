{
  "name": "üè† –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ HA —Å GigaChat (—Å –ø–∞–º—è—Ç—å—é)",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"],
        "additionalFields": {
          "download": false,
          "userIds": "YOUR_TELEGRAM_USER_ID"
        }
      },
      "name": "Telegram: Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [240, 400],
      "id": "telegram-trigger-monitor",
      "webhookId": "ha-monitor-webhook",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot Personal"
        }
      },
      "notes": "–ó–ê–ú–ï–ù–ò–¢–ï: YOUR_TELEGRAM_USER_ID (–≤–∞—à Telegram ID), YOUR_TELEGRAM_CREDENTIAL_ID. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.item.json.message.text;\nconst chatId = $input.item.json.message.chat.id;\nconst userName = $input.item.json.message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';\n\nif (!text) {\n  return [{ json: { error: true, text: '‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', chat_id: chatId } }];\n}\n\nif (text === '/help' || text === '/start') {\n  const helpText = `üè† *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–º–∞*\\n\\n*–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å:*\\n‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö\\n‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ (–¥–≤–∏–∂–µ–Ω–∏–µ, –¥–≤–µ—Ä–∏, –æ–∫–Ω–∞)\\n‚Ä¢ –°—Ç–∞—Ç—É—Å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º\\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π\\n‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏\\n\\n*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\\n‚ú® –ü–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (10 —Å–æ–æ–±—â–µ–Ω–∏–π)\\nüß† –ü–æ–Ω–∏–º–∞—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤\\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤\\n\\n*–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n/clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞\\n\\nüí° *–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*\\n‚Ä¢ \\\"–ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Å–ø–∞–ª—å–Ω–µ?\\\"\\n‚Ä¢ \\\"–ê –≤ –≥–æ—Å—Ç–∏–Ω–æ–π?\\\" (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\\n‚Ä¢ \\\"–ï—Å—Ç—å –ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –¥–æ–º–µ?\\\"\\n‚Ä¢ \\\"–ö–∞–∫–∏–µ –æ–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã?\\\"\\n‚Ä¢ \\\"–ü–æ–∫–∞–∂–∏ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏\\\"\\n\\nü§ñ *GigaChat + Memory = —É–º–Ω—ã–π –¥–∏–∞–ª–æ–≥!*`;\n  return [{ json: { isCommand: true, chat_id: chatId, response: helpText } }];\n}\n\nif (text === '/clear') {\n  return [{ json: { isCommand: true, chat_id: chatId, response: 'üóëÔ∏è –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É.' } }];\n}\n\nreturn [{ json: { isCommand: false, text: text, chat_id: chatId, user_name: userName } }];"
      },
      "name": "Check: System Commands",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 400],
      "id": "check-commands-monitor",
      "notes": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ /help –∏ /clear"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isCommand }}",
              "value2": true
            }
          ]
        }
      },
      "name": "If: System Command?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [680, 400],
      "id": "if-system-command"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.response }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Telegram: Send System Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [900, 280],
      "id": "telegram-system-response",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot Personal"
        }
      }
    },
    {
      "parameters": {
        "url": "http://YOUR_HA_IP:8123/api/states",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "name": "HA: Get All States",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 520],
      "id": "ha-states-monitor",
      "credentials": {
        "httpHeaderAuth": {
          "id": "YOUR_HA_CREDENTIAL_ID",
          "name": "Home Assistant API"
        }
      },
      "notes": "–ó–ê–ú–ï–ù–ò–¢–ï: YOUR_HA_IP, YOUR_HA_CREDENTIAL_ID. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ HA"
    },
    {
      "parameters": {
        "jsCode": "// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\nconst states = $input.item.json;\nconst userData = $('Check: System Commands').first().json;\n\nconst monitoringDevices = {};\nconst allowedDomains = ['sensor', 'binary_sensor', 'climate', 'light', 'switch', 'cover', 'lock', 'device_tracker'];\n\nstates.forEach(entity => {\n  const domain = entity.entity_id.split('.')[0];\n  \n  if (allowedDomains.includes(domain)) {\n    const friendlyName = entity.attributes.friendly_name || entity.entity_id;\n    \n    monitoringDevices[entity.entity_id] = {\n      name: friendlyName,\n      state: entity.state,\n      domain: domain,\n      unit: entity.attributes.unit_of_measurement || '',\n      device_class: entity.attributes.device_class || '',\n      last_changed: entity.last_changed\n    };\n  }\n});\n\nreturn [{ json: { \n  devices: monitoringDevices,\n  device_count: Object.keys(monitoringDevices).length,\n  user_text: userData.text,\n  chat_id: userData.chat_id,\n  user_name: userData.user_name\n}}];"
      },
      "name": "Filter: Monitoring Devices",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 520],
      "id": "filter-devices-monitor",
      "notes": "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (sensors, climate, lights, etc)"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Check: System Commands').first().json.chat_id }}",
        "contextWindowLength": 10
      },
      "name": "Memory: Conversation Buffer",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [1340, 760],
      "id": "memory-buffer-monitor",
      "notes": "–ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞. Session = chat_id –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "RqUID",
              "value": "={{ $runIndex }}-{{ $now.toMillis() }}"
            },
            {
              "name": "Authorization",
              "value": "Basic YOUR_GIGACHAT_AUTH_TOKEN"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "scope",
              "value": "GIGACHAT_API_PERS"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GigaChat: Get OAuth Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 640],
      "id": "gigachat-oauth-monitor",
      "notes": "–ó–ê–ú–ï–ù–ò–¢–ï: YOUR_GIGACHAT_AUTH_TOKEN (base64 –æ—Ç client_id:client_secret). –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://developers.sber.ru/studio/workspaces"
    },
    {
      "parameters": {
        "model": "GigaChat",
        "options": {
          "baseURL": "https://gigachat.devices.sberbank.ru/api/v1",
          "temperature": 0.7,
          "maxTokens": 500
        },
        "requestOptions": {
          "headers": {
            "Authorization": "=Bearer {{ $('GigaChat: Get OAuth Token').first().json.access_token }}"
          }
        }
      },
      "name": "GigaChat: Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGeneric",
      "typeVersion": 1,
      "position": [1560, 520],
      "id": "gigachat-model-monitor",
      "notes": "HTTP Chat Model –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–ª—è GigaChat API. –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Generic HTTP Chat Model"
    },
    {
      "parameters": {
        "name": "get_sensor_state",
        "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—è –∏ —Ç.–¥.). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è.",
        "workflowId": "YOUR_WORKFLOW_ID_GET_SENSOR"
      },
      "name": "Tool: Get Sensor State",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 880],
      "id": "tool-sensor-monitor",
      "notes": "–°–û–ó–î–ê–ô–¢–ï workflow –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–∞. –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: entity_id"
    },
    {
      "parameters": {
        "name": "get_device_list",
        "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (lights, sensors, climate). –ü–∞—Ä–∞–º–µ—Ç—Ä: domain (light, sensor, climate, binary_sensor)",
        "workflowId": "YOUR_WORKFLOW_ID_GET_LIST"
      },
      "name": "Tool: Get Device List",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 1000],
      "id": "tool-list-monitor",
      "notes": "–°–û–ó–î–ê–ô–¢–ï workflow –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ domain"
    },
    {
      "parameters": {
        "name": "get_history",
        "description": "–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: entity_id, hours (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)",
        "workflowId": "YOUR_WORKFLOW_ID_GET_HISTORY"
      },
      "name": "Tool: Get History",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [1560, 1120],
      "id": "tool-history-monitor",
      "notes": "–°–û–ó–î–ê–ô–¢–ï workflow –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ HA"
    },
    {
      "parameters": {
        "text": "={{ $('Filter: Monitoring Devices').first().json.user_text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–º–Ω–æ–≥–æ –¥–æ–º–∞. –°–µ–≥–æ–¥–Ω—è {{ $now.format('cccc, d MMMM yyyy, HH:mm', 'ru') }}.\n\n–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:\n{{ JSON.stringify($('Filter: Monitoring Devices').first().json.devices, null, 2) }}\n\n–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–º–∞:\n- –ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–≤–ª–∞–∂–Ω–æ—Å—Ç—å\n- –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤\n- –ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã\n- –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π\n\n–û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û –∏ –ü–û–ù–Ø–¢–ù–û. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–ø—Ä–æ—Å–∏—Ç—å '–∞ –≤ —Å–ø–∞–ª—å–Ω–µ?' –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.\n\n–í–∞–∂–Ω–æ: —Ç—ã –ù–ï —É–ø—Ä–∞–≤–ª—è–µ—à—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—à—å –∏ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
        }
      },
      "name": "Agent: Home Monitor",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [1780, 520],
      "id": "agent-monitor",
      "notes": "Langchain Agent —Å –ø–∞–º—è—Ç—å—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–º–∞"
    },
    {
      "parameters": {
        "chatId": "={{ $('Check: System Commands').first().json.chat_id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Telegram: Send Answer",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2000, 520],
      "id": "telegram-answer-monitor",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram Bot Personal"
        }
      }
    }
  ],
  "connections": {
    "Telegram: Trigger": {
      "main": [
        [
          {
            "node": "Check: System Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check: System Commands": {
      "main": [
        [
          {
            "node": "If: System Command?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If: System Command?": {
      "main": [
        [
          {
            "node": "Telegram: Send System Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HA: Get All States",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HA: Get All States": {
      "main": [
        [
          {
            "node": "Filter: Monitoring Devices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Monitoring Devices": {
      "main": [
        [
          {
            "node": "GigaChat: Get OAuth Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Get OAuth Token": {
      "main": [
        [
          {
            "node": "Agent: Home Monitor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory: Conversation Buffer": {
      "ai_memory": [
        [
          {
            "node": "Agent: Home Monitor",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent: Home Monitor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Get Sensor State": {
      "ai_tool": [
        [
          {
            "node": "Agent: Home Monitor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Get Device List": {
      "ai_tool": [
        [
          {
            "node": "Agent: Home Monitor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Get History": {
      "ai_tool": [
        [
          {
            "node": "Agent: Home Monitor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Agent: Home Monitor": {
      "main": [
        [
          {
            "node": "Telegram: Send Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-11T01:30:00.000Z",
      "updatedAt": "2025-10-11T01:30:00.000Z",
      "id": "ha-monitoring-gigachat",
      "name": "home-assistant"
    },
    {
      "createdAt": "2025-10-11T01:30:00.000Z",
      "updatedAt": "2025-10-11T01:30:00.000Z",
      "id": "gigachat-memory",
      "name": "gigachat"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "your-n8n-instance"
  },
  "versionId": "ha-monitor-gigachat-v1",
  "triggerCount": 1,
  "createdAt": "2025-10-11T01:30:00.000Z",
  "updatedAt": "2025-10-11T01:30:00.000Z"
}

