#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Markdown —Ñ–∞–π–ª–∞—Ö
"""

import re
import sys
from pathlib import Path
from typing import List, Tuple

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
RESET = '\033[0m'
BOLD = '\033[1m'


class DocValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.errors = []
        self.warnings = []
        self.total_files = 0
        self.checked_files = 0

    def validate_all(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë           üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò üîç                           ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Markdown —Ñ–∞–π–ª—ã
        md_files = self._find_markdown_files()
        self.total_files = len(md_files)

        if not md_files:
            print("‚ö†Ô∏è  Markdown —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ Markdown —Ñ–∞–π–ª–æ–≤: {self.total_files}")
        print()
        print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for md_file in md_files:
            self._validate_file(md_file)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._print_results()

        return len(self.errors) == 0

    def _find_markdown_files(self) -> List[Path]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ Markdown —Ñ–∞–π–ª—ã"""
        md_files = []

        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        exclude_dirs = {
            '.git', 'node_modules', '__pycache__',
            '.venv', 'venv', 'audits', 'backups',
            '.storage', 'deps', 'tts'
        }

        for md_file in self.project_root.rglob('*.md'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –≤ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            if any(excluded in md_file.parts for excluded in exclude_dirs):
                continue
            md_files.append(md_file)

        return sorted(md_files)

    def _validate_file(self, filepath: Path):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        rel_path = filepath.relative_to(self.project_root)

        try:
            content = filepath.read_text(encoding='utf-8')
            lines = content.split('\n')

            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            file_errors = []

            # –ü–†–û–í–ï–†–ö–ê 1: ```bash\n```text (—Å–∞–º–∞—è –∫—Ä–∏—Ç–∏—á–Ω–∞—è!)
            file_errors.extend(self._check_broken_code_blocks(lines, rel_path))

            # –ü–†–û–í–ï–†–ö–ê 2: ```text —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ ``` (–±–µ–∑ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
            file_errors.extend(self._check_missing_newline_between_blocks(lines, rel_path))

            # –ü–†–û–í–ï–†–ö–ê 3: Trailing spaces –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö ```
            file_errors.extend(self._check_trailing_spaces_after_fence(lines, rel_path))

            # –ü–†–û–í–ï–†–ö–ê 4: –ü—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
            file_errors.extend(self._check_empty_code_blocks(lines, rel_path))

            # –ü–†–û–í–ï–†–ö–ê 5: –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
            file_errors.extend(self._check_unclosed_code_blocks(lines, rel_path))

            # –ü–†–û–í–ï–†–ö–ê 6: Hardcoded –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            file_errors.extend(self._check_hardcoded_paths(lines, rel_path))

            if file_errors:
                print(f"üìÑ {rel_path} ... {RED}‚ùå –û–®–ò–ë–ö–ò!{RESET}")
                for error in file_errors:
                    self.errors.append(error)
                    print(f"   {RED}‚Ä¢{RESET} {error}")
                print()
            else:
                print(f"üìÑ {rel_path} ... {GREEN}‚úÖ{RESET}")

            self.checked_files += 1

        except Exception as e:
            error = f"{rel_path}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"
            self.errors.append(error)
            print(f"üìÑ {rel_path} ... {RED}‚ùå –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø!{RESET}")

    def _check_broken_code_blocks(self, lines: List[str], filepath: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ ```bash\n```text –ø–∞—Ç—Ç–µ—Ä–Ω"""
        errors = []

        for i in range(len(lines) - 1):
            line = lines[i].strip()
            next_line = lines[i + 1].strip() if i + 1 < len(lines) else ""

            # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π ``` –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å—Ä–∞–∑—É –∏–¥–µ—Ç ```text (–∏–ª–∏ –¥—Ä—É–≥–æ–π —è–∑—ã–∫)
            if re.match(r'^```\s*$', line):
                # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ``` (—É—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã)
                if next_line.startswith('```') and not next_line == '```':
                    errors.append(
                        f"–°—Ç—Ä–æ–∫–∞ {i + 1}: –°–ª–æ–º–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞ - –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π ``` "
                        f"—Å—Ä–∞–∑—É –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –∏–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π {next_line}"
                    )

        return errors

    def _check_missing_newline_between_blocks(self, lines: List[str], filepath: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–µ–∂–¥—É –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º ``` –µ—Å—Ç—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"""
        errors = []
        in_code_block = False

        for i in range(len(lines) - 1):
            line = lines[i].strip()
            next_line = lines[i + 1].strip() if i + 1 < len(lines) else ""

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∞
            if line.startswith('```'):
                in_code_block = not in_code_block

                # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫
                if not in_code_block and line == '```':
                    # –ò —Å—Ä–∞–∑—É —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–æ–≤—ã–π –±–ª–æ–∫
                    if next_line.startswith('```') and next_line != '```':
                        errors.append(
                            f"–°—Ç—Ä–æ–∫–∞ {i + 2}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –∫–æ–¥–∞ "
                            f"(–ø–æ—Å–ª–µ ``` –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ {next_line})"
                        )

        return errors

    def _check_trailing_spaces_after_fence(self, lines: List[str], filepath: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ trailing spaces –ø–æ—Å–ª–µ ``` –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ —Å —è–∑—ã–∫–æ–º"""
        errors = []

        for i, line in enumerate(lines):
            # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π ``` —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            if re.match(r'^```\s+$', line):
                errors.append(
                    f"–°—Ç—Ä–æ–∫–∞ {i + 1}: Trailing spaces –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ ``` "
                    f"(–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: ``` –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)"
                )

        return errors

    def _check_empty_code_blocks(self, lines: List[str], filepath: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞"""
        warnings = []
        in_code_block = False
        block_start = 0
        block_lines = []

        for i, line in enumerate(lines):
            if line.startswith('```'):
                if not in_code_block:
                    # –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞
                    in_code_block = True
                    block_start = i + 1
                    block_lines = []
                else:
                    # –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞
                    in_code_block = False
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–ª–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                    if not any(l.strip() for l in block_lines):
                        warnings.append(
                            f"–°—Ç—Ä–æ–∫–∞ {block_start}: –ü—É—Å—Ç–æ–π –±–ª–æ–∫ –∫–æ–¥–∞"
                        )
            elif in_code_block:
                block_lines.append(line)

        self.warnings.extend(warnings)
        return []

    def _check_unclosed_code_blocks(self, lines: List[str], filepath: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞"""
        errors = []
        fence_count = 0

        for i, line in enumerate(lines):
            # –£—á–∏—Ç—ã–≤–∞–µ–º ``` –≤ –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å —Å –æ—Ç—Å—Ç—É–ø–æ–º –≤ —Å–ø–∏—Å–∫–∞—Ö)
            if '```' in line:
                fence_count += 1

        if fence_count % 2 != 0:
            errors.append(
                f"–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ –∫–æ–¥–∞: –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ``` ({fence_count})"
            )

        return errors

    def _check_hardcoded_paths(self, lines: List[str], filepath: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ hardcoded –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        errors = []

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        patterns = [
            (r'/home/[a-z]+/', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ~ –≤–º–µ—Å—Ç–æ /home/username/'),
            (r'/Users/[A-Za-z]+/', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ~ –≤–º–µ—Å—Ç–æ /Users/username/'),
        ]

        for i, line in enumerate(lines):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏ code block –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ~
            if '```' in line or line.strip().startswith('~'):
                continue

            for pattern, message in patterns:
                if re.search(pattern, line):
                    match = re.search(pattern, line)
                    errors.append(
                        f"–°—Ç—Ä–æ–∫–∞ {i + 1}: Hardcoded –ø—É—Ç—å '{match.group()}' - {message}"
                    )

        return errors

    def _print_results(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print()
        print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.checked_files}")
        print(f"   {GREEN}‚úÖ –ë–µ–∑ –æ—à–∏–±–æ–∫:    {self.checked_files - len(set(e.split(':')[0] for e in self.errors))}{RESET}")
        print(f"   {RED}‚ùå –° –æ—à–∏–±–∫–∞–º–∏:    {len(set(e.split(':')[0] for e in self.errors))}{RESET}")

        if self.warnings:
            print(f"   {YELLOW}‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(self.warnings)}{RESET}")

        print()

        if not self.errors:
            print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            print("‚ïë           ‚úÖ –í–°–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –í–ê–õ–ò–î–ù–ê! ‚úÖ                        ‚ïë")
            print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        else:
            print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            print("‚ïë        ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò –í –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò! ‚ùå                  ‚ïë")
            print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
            print()
            print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
            print()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
            broken_blocks = [e for e in self.errors if '–°–ª–æ–º–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞' in e]
            trailing = [e for e in self.errors if 'Trailing spaces' in e]
            hardcoded = [e for e in self.errors if 'Hardcoded –ø—É—Ç—å' in e]
            unclosed = [e for e in self.errors if '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ –∫–æ–¥–∞' in e]

            if broken_blocks:
                print(f"{RED}üî¥ –°–ª–æ–º–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (```bash —Å—Ä–∞–∑—É –∑–∞ ```text):{RESET}")
                print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(broken_blocks)}")
                print()

            if trailing:
                print(f"{YELLOW}üü° Trailing spaces –ø–æ—Å–ª–µ ```:{RESET}")
                print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(trailing)}")
                print()

            if hardcoded:
                print(f"{YELLOW}üü° Hardcoded –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:{RESET}")
                print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(hardcoded)}")
                print()

            if unclosed:
                print(f"{RED}üî¥ –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞:{RESET}")
                print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(unclosed)}")
                print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    project_root = script_dir.parent

    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = DocValidator(project_root)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    success = validator.validate_all()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()
