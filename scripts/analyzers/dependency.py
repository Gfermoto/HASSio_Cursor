#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Home Assistant
–ù–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏, –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã, circular dependencies
"""

import yaml
import re
import json
from pathlib import Path
from collections import defaultdict
from typing import Dict, List, Set, Any


class DependencyAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self, config_dir: str):
        self.config_dir = Path(config_dir)
        self.entities: Dict[str, Dict] = defaultdict(lambda: {
            'type': 'unknown',
            'used_in': [],
            'depends_on': set(),
            'file': None,
            'definition': None
        })
        self.automations: Dict[str, Dict] = {}
        self.scripts: Dict[str, Dict] = {}

    def analyze(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        # 1. –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        self._scan_automations()
        self._scan_scripts()
        self._scan_sensors()
        self._scan_configuration()

        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self._build_dependencies()

        # 3. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—ã
        orphaned = self.find_orphaned()
        circular = self.find_circular_dependencies()

        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return {
            'total_entities': len(self.entities),
            'total_automations': len(self.automations),
            'total_scripts': len(self.scripts),
            'orphaned_entities': orphaned,
            'circular_dependencies': circular,
            'entities': dict(self.entities)
        }

    def _scan_automations(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π"""
        auto_file = self.config_dir / 'automations.yaml'
        if not auto_file.exists():
            return

        try:
            with open(auto_file, 'r', encoding='utf-8') as f:
                automations = yaml.safe_load(f) or []

            for auto in automations:
                auto_id = auto.get('id') or auto.get('alias', 'unknown')
                self.automations[auto_id] = auto

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ entity_id
                auto_str = yaml.dump(auto)
                entities_used = self._extract_entities(auto_str)

                for entity in entities_used:
                    self.entities[entity]['used_in'].append({
                        'type': 'automation',
                        'id': auto_id,
                        'alias': auto.get('alias'),
                        'file': 'automations.yaml'
                    })

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è automations.yaml: {e}")

    def _scan_scripts(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        scripts_file = self.config_dir / 'scripts.yaml'
        if not scripts_file.exists():
            return

        try:
            with open(scripts_file, 'r', encoding='utf-8') as f:
                scripts = yaml.safe_load(f) or {}

            for script_id, script_data in scripts.items():
                self.scripts[script_id] = script_data

                script_str = yaml.dump(script_data)
                entities_used = self._extract_entities(script_str)

                for entity in entities_used:
                    self.entities[entity]['used_in'].append({
                        'type': 'script',
                        'id': script_id,
                        'file': 'scripts.yaml'
                    })

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è scripts.yaml: {e}")

    def _scan_sensors(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–≤"""
        for sensor_file in ['sensors.yaml', 'binary_sensors.yaml']:
            file_path = self.config_dir / sensor_file
            if not file_path.exists():
                continue

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    sensors = yaml.safe_load(f) or []

                for sensor in sensors:
                    if isinstance(sensor, dict):
                        entity_id = sensor.get('unique_id') or sensor.get('name', 'unknown')
                        self.entities[entity_id]['type'] = 'sensor'
                        self.entities[entity_id]['file'] = sensor_file
                        self.entities[entity_id]['definition'] = sensor

            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {sensor_file}: {e}")

    def _scan_configuration(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_file = self.config_dir / 'configuration.yaml'
        if not config_file.exists():
            return

        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f) or {}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º entity_id –∏–∑ –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_str = yaml.dump(config)
            entities = self._extract_entities(config_str)

            for entity in entities:
                if entity not in self.entities:
                    self.entities[entity]['type'] = 'config'
                    self.entities[entity]['file'] = 'configuration.yaml'

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è configuration.yaml: {e}")

    def _extract_entities(self, text: str) -> Set[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ entity_id –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è entity_id: domain.entity_name
        pattern = r'\b([a-z_]+\.[a-z0-9_]+)\b'
        entities = set(re.findall(pattern, text))

        # –§–∏–ª—å—Ç—Ä—É–µ–º false positives
        valid_domains = {
            'sensor', 'binary_sensor', 'light', 'switch', 'climate',
            'cover', 'fan', 'lock', 'media_player', 'person', 'device_tracker',
            'automation', 'script', 'input_boolean', 'input_number', 'input_select',
            'input_text', 'input_datetime', 'timer', 'counter', 'zone', 'sun',
            'weather', 'camera', 'alarm_control_panel', 'vacuum', 'notify',
            'group', 'scene', 'mqtt', 'homeassistant'
        }

        return {e for e in entities if e.split('.')[0] in valid_domains}

    def _build_dependencies(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        # –î–ª—è –∫–∞–∂–¥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç —á–µ–≥–æ –æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç
        for entity_id, data in self.entities.items():
            if data.get('definition'):
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
                def_str = yaml.dump(data['definition'])
                depends = self._extract_entities(def_str)
                data['depends_on'] = depends - {entity_id}  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É —Å–µ–±—è

    def find_orphaned(self) -> List[str]:
        """–ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        orphaned = []

        for entity_id, data in self.entities.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
            domain = entity_id.split('.')[0]
            if domain in ['sun', 'homeassistant']:
                continue

            # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏–≥–¥–µ –∏ –Ω–µ device/person
            if not data['used_in'] and data['type'] not in ['device', 'person', 'zone']:
                orphaned.append(entity_id)

        return sorted(orphaned)

    def find_circular_dependencies(self) -> List[List[str]]:
        """–ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        circular = []
        visited = set()
        rec_stack = set()

        def dfs(entity: str, path: List[str]) -> bool:
            """DFS –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤"""
            visited.add(entity)
            rec_stack.add(entity)
            path.append(entity)

            for dep in self.entities[entity].get('depends_on', set()):
                if dep not in visited:
                    if dfs(dep, path.copy()):
                        return True
                elif dep in rec_stack:
                    # –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª!
                    cycle_start = path.index(dep)
                    circular.append(path[cycle_start:] + [dep])
                    return True

            rec_stack.remove(entity)
            return False

        for entity in self.entities:
            if entity not in visited:
                dfs(entity, [])

        return circular

    def analyze_impact(self, entity_id: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏"""
        if entity_id not in self.entities:
            return {'error': 'Entity not found'}

        data = self.entities[entity_id]
        used_in = data.get('used_in', [])

        impact = {
            'entity_id': entity_id,
            'direct_usage': len(used_in),
            'automations': [u for u in used_in if u['type'] == 'automation'],
            'scripts': [u for u in used_in if u['type'] == 'script'],
            'depends_on': list(data.get('depends_on', set())),
            'severity': 'low'
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
        if impact['direct_usage'] > 5:
            impact['severity'] = 'critical'
        elif impact['direct_usage'] > 2:
            impact['severity'] = 'high'
        elif impact['direct_usage'] > 0:
            impact['severity'] = 'medium'

        return impact

    def generate_mermaid_graph(self, entity_id: str = None, depth: int = 2) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        lines = ['graph TD']

        if entity_id:
            # –ì—Ä–∞—Ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
            self._add_entity_to_graph(lines, entity_id, depth, set())
        else:
            # –ì—Ä–∞—Ñ —Ç–æ–ø-10 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö
            top_entities = sorted(
                self.entities.items(),
                key=lambda x: len(x[1].get('used_in', [])),
                reverse=True
            )[:10]

            for entity, _ in top_entities:
                self._add_entity_to_graph(lines, entity, 1, set())

        return '\n'.join(lines)

    def _add_entity_to_graph(self, lines: List[str], entity: str, depth: int, visited: Set[str]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ"""
        if depth <= 0 or entity in visited:
            return

        visited.add(entity)
        data = self.entities.get(entity, {})

        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª
        node_id = entity.replace('.', '_')
        entity_type = data.get('type', 'unknown')
        lines.append(f'    {node_id}["{entity}<br/>({entity_type})"]')

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤"
        for usage in data.get('used_in', [])[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5
            usage_id = usage['id'].replace('.', '_').replace(' ', '_')
            usage_type = usage['type']
            lines.append(f'    {usage_id}["{usage["id"]}<br/>({usage_type})"]')
            lines.append(f'    {node_id} --> {usage_id}')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for dep in list(data.get('depends_on', set()))[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3
            if dep in self.entities:
                self._add_entity_to_graph(lines, dep, depth - 1, visited)
                dep_id = dep.replace('.', '_')
                lines.append(f'    {dep_id} --> {node_id}')


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys

    config_dir = sys.argv[1] if len(sys.argv) > 1 else 'config'

    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë           üï∏Ô∏è  –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò üï∏Ô∏è               ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()

    analyzer = DependencyAnalyzer(config_dir)
    report = analyzer.analyze()

    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π:   {report['total_entities']}")
    print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π:     {report['total_automations']}")
    print(f"   –°–∫—Ä–∏–ø—Ç–æ–≤:          {report['total_scripts']}")
    print()

    # Orphaned entities
    if report['orphaned_entities']:
        print(f"üî¥ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ ({len(report['orphaned_entities'])}):")
        for entity in report['orphaned_entities'][:10]:
            print(f"   ‚Ä¢ {entity}")
        if len(report['orphaned_entities']) > 10:
            print(f"   ... –∏ –µ—â–µ {len(report['orphaned_entities']) - 10}")
        print()

    # Circular dependencies
    if report['circular_dependencies']:
        print(f"‚ö†Ô∏è  –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({len(report['circular_dependencies'])}):")
        for cycle in report['circular_dependencies'][:5]:
            print(f"   ‚Ä¢ {' ‚Üí '.join(cycle)}")
        print()

    # –¢–æ–ø-10 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö
    top_used = sorted(
        report['entities'].items(),
        key=lambda x: len(x[1].get('used_in', [])),
        reverse=True
    )[:10]

    if top_used:
        print("üîù –¢–æ–ø-10 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π:")
        for entity, data in top_used:
            usage_count = len(data.get('used_in', []))
            if usage_count > 0:
                print(f"   {usage_count:3d}x ‚Ä¢ {entity}")
        print()

    # Impact analysis –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if report['total_entities'] > 0:
        example_entity = list(report['entities'].keys())[0]
        impact = analyzer.analyze_impact(example_entity)

        print(f"üí• –ü—Ä–∏–º–µ—Ä Impact Analysis: {example_entity}")
        print(f"   Severity: {impact['severity']}")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {impact['direct_usage']} –º–µ—Å—Ç–∞—Ö")
        print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π: {len(impact['automations'])}")
        print(f"   –°–∫—Ä–∏–ø—Ç–æ–≤: {len(impact['scripts'])}")
        print()


if __name__ == '__main__':
    main()
